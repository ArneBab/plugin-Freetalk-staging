<?xml version="1.0"?>
<!-- ant build file for Freetalk -->

<project name="Freetalk" default="dist" basedir=".">
	<!-- You can use this file to override the below properties. -->
	<property file="override.properties"/>
	
	<!-- Freenet build01481 compiled with "./gradlew jar copyRuntimeLibs" will copy the         -->
	<!-- freenet.jar and its dependencies to this directory:                                    -->
	<property name="freenet.lib.new.location"   location="../fred/build/output/"/>
	<!-- Older Freenet builds will use these places for the JARs, some of which have to be      -->
	<!-- downloaded manually:                                                                   -->
	<property name="freenet.lib.old.location.1" location="../fred/lib/bcprov.jar"/>
	<property name="freenet.lib.old.location.2" location="../fred/lib/jna-platform.jar"/>
	<property name="freenet.lib.old.location.3" location="../fred/lib/jna.jar"/>
	<property name="freenet.lib.old.location.4" location="../fred/lib/freenet/freenet-ext.jar"/>
	<property name="freenet.lib.old.location.5" location="../fred/dist/freenet.jar"/>
	
	<property name="debug-node-freetalk-plugin.location" location="../fred/plugins/Freetalk.jar"/>
	<property name="svn.revision" value="@custom@"/>
	<property name="source-version" value="1.6"/>
	<property name="target-version" value="1.6"/>
	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="dist" location="dist/"/>
	<property name="src" location="src/"/>
	<property name="junit.location" value="/usr/share/java/junit4.jar"/>
	<property name="version.src" value="plugins/Freetalk/Version.java" />
	<property name="version.build" value="plugins/Freetalk/Version.class" />

	<available file="src/plugins/Freetalk/Version.java" property="version.present"/>
	
	<path id="libraries.classpath">
		<!-- Use filesets instead of <pathelement> to:
		     - allow using wildcards when including freenet.lib.new.location so we don't need to
		       synchronize the list of JARs which fred needs with what this build file includes.
		     - for the old JAR locations ensure the print-libs task won't print files which don't
		       exist as that is what he wildcard usage dictates for thew new location already. -->
		
		<fileset dir="${freenet.lib.new.location}" erroronmissingdir="no" casesensitive="no">
			<include name="**/*.jar"/>
		</fileset>
		<fileset file="${freenet.lib.old.location.1}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.2}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.3}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.4}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.5}" erroronmissingdir="no"/>
	</path>
	
	<path id="junit.classpath">
		<pathelement location="${junit.location}" />
	</path>
	
	<!-- For print-libs task: All runtime dependencies of Freetalk plus the build-time dependencies.
	     Uses <fileset> instead of <pathelement> so it only contains only those which exist as that
	     is what lib.path does already. -->
	<path id="lib.external.all.path">
		<path refid="libraries.classpath"/>
		<path refid="junit.classpath" />
	</path>

	<presetdef name="javac">
		<!--
		Workaround for ant 1.8 misfeature. TODO: Remove when ant fixes this.
		
		If we don't set this to false, we will get "warning: 'includeantruntime' was not set, defaulting to
		build.sysclasspath=last; set to false for repeatable builds"
		
		(includeAntRuntime = "Whether to include the Ant run-time libraries in the classpath; defaults to yes, 
		unless build.sysclasspath is set. It is usually best to set this to false so the script's behavior 
		is not sensitive to the environment in which it is run."
		Source: https://ant.apache.org/manual/Tasks/javac.html)
		-->
		<javac includeantruntime="false" />
	</presetdef>

	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
		<arg value="--dirty" />
	</exec>

	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<target name="print-libs">
		<echo>External dependencies on classpath follow, but ONLY those which did exist.</echo>
		<echo>(This cannot tell which JARs are missing because that would require ant-contrib</echo>
		<echo>and I don't want to require Freenet release managers to install it. Sorry.)</echo>
		<echo></echo>
		<echo>If compiling fails due to missing classes please:</echo>
		<echo>- ensure fred was built with "./gradlew jar copyRuntimeLibs" to make it copy</echo>
		<echo>  its dependencies' JARs to "build/output/".</echo>
		<echo>- compare the found JARs against the configuration at top of build.xml to find</echo>
		<echo>  out which JARs are missing.</echo>
		<echo></echo>
		<pathconvert refid="lib.external.all.path" pathsep="${line.separator}" property="all.path.printable"/>
		<echo>${all.path.printable}</echo>
	</target>

	<target name="mkdir">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-test}"/>
		<mkdir dir="${dist}"/>
	</target>

	<!-- ================================================== -->
	<target name="compile" depends="print-libs, mkdir" >
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Create the Version file with patched revision number in ${build} -->
		<copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.build}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>

		<!-- Force compile of Version.java in case compile of ${src} didn't trigger it -->
		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath refid="libraries.classpath" />
			<include name="${version.src}"/>
		</javac>

		<!-- FIXME: remove the debug and replace with optimize -->
		<javac srcdir="src/" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath refid="libraries.classpath" />
			<include name="**/*.java"/>
			<exclude name="${version.src}"/>
		</javac>
		<copy todir="${build}">
			<fileset dir="src/">
				<include name="**/*.l10n" />
				<include name="plugins/Freetalk/ui/web/css/*.css" />
			</fileset>
		</copy>
	</target>

	<!-- ================================================== -->

	<target name="unit-build" depends="compile" unless="${test.skip}">
		<javac srcdir="test/" destdir="${build-test}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<pathelement path="${build}"/>
			</classpath>
			<classpath refid="libraries.classpath" />
			<classpath refid="junit.classpath" />
			
			<compilerarg value="-Xlint"/>
			<include name="**/*.java"/>
		</javac>
	</target>

	<target name="junit" depends="unit-build" unless="${test.skip}">
		<junit printsummary="yes" fork="yes" haltonfailure="yes">
			<classpath>
				<pathelement path="${build}"/>
				<pathelement path="${build-test}"/>
			</classpath>
			<classpath refid="libraries.classpath" />
			<classpath refid="junit.classpath" />

			<assertions><enable/></assertions>
			<formatter type="plain" usefile="false"/>

			<batchtest fork="yes">
				<fileset dir="${build-test}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
			<sysproperty key="benchmark" value="${benchmark}" />
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
		</junit>
	</target>

	<!-- ================================================== -->
	<target name="dist" depends="clean,compile,junit"
		description="generate the distribution" >
		<jar jarfile="${dist}/Freetalk.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.Freetalk.Freetalk"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="*.txt"/>
			</fileset>
			<fileset dir="${build}/"/>
		</jar>
	</target>

	<!-- ================================================== -->
	<target name="clean" description="Delete class files and docs dir and the plugin file in plugins/ of your debug node..">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${dist}"/>
		<delete file="${debug-node-freetalk-plugin.location}"/>
	</target>
</project>
