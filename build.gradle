apply plugin: 'java'
defaultTasks 'jar', 'test'
sourceSets.main.java.srcDirs = ['src/']
sourceSets.test.java.srcDirs = ['test/']
sourceCompatibility = targetCompatibility = 8
tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
javadoc.enabled = false

configurations { junit } // Needed when we manually specify the tests' classpath
dependencies {
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	// TODO: mvn.freenetproject.org is not browseable so I don't know the proper URI for fred and
	// its dependencies and hence am including the dependencies as flat files.
	// Use Gradle's dependency management + gradle-witness once this has been resolved.
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	compile files('db4o-7.4/db4o.jar')
	junit files('/usr/share/java/junit4.jar', '/usr/share/java/hamcrest-core.jar')
	testCompile configurations.junit
}

task compileDb4o(type: Exec) {
	// See https://bugs.freenetproject.org/view.php?id=7058
	outputs.upToDateWhen { file('db4o-7.4/db4o.jar').exists() }
	workingDir 'db4o-7.4'
	commandLine 'ant', "-Djavac.source.version=" + sourceCompatibility,
	                   "-Djavac.target.version=" + targetCompatibility
}

compileJava {
	dependsOn 'compileDb4o'
}

task prepareVersionFile(type: Copy) {
	outputs.upToDateWhen { false }
	from sourceSets.main.java.srcDirs ; into "${buildDir}/custom/versionFileJava/"
	include 'plugins/Freetalk/Version.java' ; filter {
		it.replaceAll("@custom@", "git describe --always --abbrev=4 --dirty".execute().text.trim())
	}
}

task compileVersionFile(type: JavaCompile, dependsOn: ['compileJava', 'prepareVersionFile']) {
	classpath = sourceSets.main.compileClasspath
	source = prepareVersionFile.destinationDir
	destinationDir = file("${buildDir}/custom/versionFileClass/")
}

tasks.register("testJar", Jar)
["jar", "testJar"].each { jarType ->
task("$jarType", type: Jar, dependsOn: tasks.withType(AbstractCompile)) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	duplicatesStrategy = "fail"
	baseName = (jarType == 'testJar') ? 'Freetalk-with-unit-tests' : 'Freetalk'
	destinationDir = new File(projectDir, (jarType == 'testJar') ? "build-test" : "dist")
	manifest { attributes("Plugin-Main-Class": "plugins.Freetalk.Freetalk") }
	
	// FIXME: Debug code, remove
	println 'Listing sourceSets.main.output.classesDirs: '
	sourceSets.main.output.classesDirs.each {
		println 'Main classesDir: ' + it }
	
	from(sourceSets.main.output.classesDirs) { exclude 'plugins/Freetalk/Version.class' }
	from(compileVersionFile.destinationDir) { include 'plugins/Freetalk/Version.class' }
	from(sourceSets.main.java.srcDirs) { include 'plugins/Freetalk/l10n/*.l10n' }
	from(sourceSets.main.java.srcDirs) { include 'plugins/Freetalk/ui/web/css/*.css' }
	from zipTree('db4o-7.4/db4o.jar')
	if(jarType == 'testJar') from sourceSets.test.output.classesDirs
	
	// FIXME: Debug code, remove
	eachFile {
		println "Input file of task $jarType: " + it
	}
}}

test {
	dependsOn 'testJar'
	
	// Reset classpath to only use the JAR, not the class files, because some tests may need a JAR
	// to load into a Freenet node, and given the JAR is needed we shouldn't duplicate its classes.
	classpath = fileTree(dir: '../fred/build/output/', include: '*.jar')
	classpath+= files(testJar.archivePath)
	classpath+= configurations.junit
	
	scanForTestClasses = false
	include '**/*Test.class'
	exclude 'com/db4o/**'
	
	// TODO: Enable once my distribution ships a more recent Gradle which supports this.
	// failFast = true
	maxHeapSize = "512m"
	maxParallelForks = Runtime.runtime.availableProcessors()
	forkEvery = 1 // One VM per test, for safety and probably needed for maxParallelForks to work
	systemProperties += [
		"is_FT_unit_test": "true",
		"FT_test_jar": testJar.archivePath
	]
	workingDir = "${buildDir}/tmp/testsWorkingDir"
	doFirst { delete workingDir ; mkdir workingDir }
	testLogging { events "passed", "skipped", "failed" ; exceptionFormat "full" }
}

clean {
	[ 'build-test', 'test-coverage', 'dist' ].each { // Beyond defaults also delete Ant's output
		delete "${projectDir}/" + it }
	doLast { exec { workingDir 'db4o-7.4' ; commandLine 'ant','clean' } }
}
