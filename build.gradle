apply plugin: 'java'
defaultTasks 'jar', 'test'
sourceSets.main.java.srcDirs = ['src/']
sourceSets.test.java.srcDirs = ['test/']
sourceCompatibility = targetCompatibility = 8
tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
javadoc.enabled = false

configurations { junit } // Needed when we manually specify the tests' classpath
dependencies {
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	// TODO: mvn.freenetproject.org is not browseable so I don't know the proper URI for fred and
	// its dependencies and hence am including the dependencies as flat files.
	// Use Gradle's dependency management + gradle-witness once this has been resolved.
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	compile files('db4o-7.4/db4o.jar')
	junit files('/usr/share/java/junit4.jar', '/usr/share/java/hamcrest-core.jar')
	testCompile configurations.junit
}

task compileDb4o(type: Exec) {
	// See https://bugs.freenetproject.org/view.php?id=7058
	outputs.upToDateWhen { file('db4o-7.4/db4o.jar').exists() }
	workingDir 'db4o-7.4'
	commandLine 'ant', "-Djavac.source.version=" + sourceCompatibility,
	                   "-Djavac.target.version=" + targetCompatibility
}

compileJava {
	dependsOn compileDb4o
}

task getGitRevision(type: Exec) {
	commandLine "git", "describe", "--always", "--abbrev=4", "--dirty"
	standardOutput = new ByteArrayOutputStream()
	ext.output = { return standardOutput.toString() }
}

def generatedResources = "$buildDir/generated-resources/main"
sourceSets.main.output.dir(generatedResources, builtBy: 'prepareVersionFile')
task prepareVersionFile {
	def packageOfClassVersion = "$generatedResources/plugins/Freetalk"
	outputs.dir packageOfClassVersion
	outputs.upToDateWhen { false }
	
	doLast {
		// TODO: Bug: The file should be encoded in ISO 8859-1 according to Properties.load()'s
		// requirements, see plugins.Freetalk.Version.getGitRevision() which uses it upon the file.
		new File(packageOfClassVersion, "Version.properties").text =
			"git.revision=" +
			"git describe --always --abbrev=4 --dirty".execute().text.trim()
		
		// FIXME: Debug code for the git command yielding empty output when Gradle is run
		// from Eclipse. Remove once this is fixed.
		print "Git stderr: " + "git describe --always --abbrev=4 --dirty".execute().stderr.getText()
		// The above says:
		//     Git stderr: fatal: not a git repository (or any of the parent directories): .git
		// Thus we're likely in the wrong working directory, so let's check that:
		println "prepareVersionFile working dir: " + new File(".").absolutePath
		// The above says:
		//     prepareVersionFile working dir: MY_HOMEDIR/.gradle/daemon/4.10.3/.
		// So Eclipse's Gradle runner indeed does set the wrong working dir with execute() - even
		// though I have configured the "Run configuration" of Eclipse to use the proper working
		// dir!
		// FIXME: execute() is a Groovy feature, not a Gradle feature, I think.
		// Try if Gradle's "Exec" task type fixes the issue.
	}
}

tasks.create("testJar", Jar) // TODO: Performance: Use register() once my Gradle is more recent.
["jar", "testJar"].each { jarType -> tasks.getByName("$jarType") {
	// Set implicitly by the above usage of tasks.getByName()
	// Also notice that we mustn't use overwrite = true because with Gradle versions starting with
	// 5.0 it does not work properly - the "jar" task would retain its original contents just as it
	// does now with it being false, so we must always assume it is false to avoid duplicating the
	// from() inputs.
	/* overwrite false */
	
	// The task "classes" depends on everything which we need, including prepareVersionFile.
	if(jarType == 'jar')     dependsOn classes
	if(jarType == 'testJar') dependsOn testClasses
	
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	duplicatesStrategy = "fail"
	baseName = (jarType == 'testJar') ? 'Freetalk-with-unit-tests' : 'Freetalk'
	destinationDir = new File(projectDir, (jarType == 'testJar') ? "build-test" : "dist")
	manifest { attributes("Plugin-Main-Class": "plugins.Freetalk.Freetalk") }
	
	// Now define the actual contents of the JARs.
	if(jarType == 'jar') {
		// For the "jar" task there is no need to include the actual classes via from(), it is a
		// builtin of Gradle and thus populated by it (including the output of prepareVersionFile).
		// We merely have to add stuff which Gradle doesn't detect:
		// EDIT: TODO: Code quality: Use "sourceSets.main.resources {}" instead. See:
		// https://stackoverflow.com/questions/24724383/add-resources-config-files-to-your-jar-using-gradle
		from(sourceSets.main.java.srcDirs) { include 'plugins/Freetalk/l10n/*.l10n' }
		from(sourceSets.main.java.srcDirs) { include 'plugins/Freetalk/ui/web/css/*.css' }
		from zipTree('db4o-7.4/db4o.jar')
	} else if(jarType == 'testJar') {
		// The testJar task on the other hand was generated by us, so we need to fully populate its
		// contents on our own.
		// To make this maximally failsafe we just re-use the JAR generated by the JAR task as
		// input instead of re-iterating the contents here, that could cause us to forget stuff.
		// We merely add our unit test classes afterwards.
		dependsOn jar
		from zipTree(jar.archivePath)
		from sourceSets.test.output.classesDirs
	}
}}

test {
	dependsOn testJar
	
	// Reset classpath to only use the JAR, not the class files, because some tests may need a JAR
	// to load into a Freenet node, and given the JAR is needed we shouldn't duplicate its classes.
	classpath = fileTree(dir: '../fred/build/output/', include: '*.jar')
	classpath+= files(testJar.archivePath)
	classpath+= configurations.junit
	
	scanForTestClasses = false
	include '**/*Test.class'
	exclude 'com/db4o/**'
	
	// TODO: Enable once my distribution ships a more recent Gradle which supports this.
	// failFast = true
	maxHeapSize = "512m"
	maxParallelForks = Runtime.runtime.availableProcessors()
	forkEvery = 1 // One VM per test, for safety and probably needed for maxParallelForks to work
	systemProperties += [
		"is_FT_unit_test": "true",
		"FT_test_jar": testJar.archivePath
	]
	workingDir = "${buildDir}/tmp/testsWorkingDir"
	doFirst { delete workingDir ; mkdir workingDir }
	
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		
		// Allow enabling stdout/stderr so developers can obtain random seeds to reproduce failed
		// test runs.
		// TODO: Code quality: Have developers (by updating the README.md) and .travis.yml do this
		// on the command line without requiring this code here once Travis CI contains a
		// sufficiently recent Gradle for
		// "-Doverride.test.testLogging.info.showStandardStreams=true" to work.
		// Notice that the ".info" may be a typo from the person who posted this to
		// stackoverflow.com as the working code below does not contain ".info", so you may have to
		// remove that string.
		//
		// Enabling stdout/stderr requires us to tell Gradle to assume that the outputs are
		// outdated to ensure they are updated even if the user doesn't run the 'clean' target.
		outputs.upToDateWhen { false }
		showStandardStreams = (System.getenv('FREETALK__SHOW_GRADLE_TEST_OUTPUT') == '1')
	}
}

clean {
	[ 'build-test', 'test-coverage', 'dist' ].each { // Beyond defaults also delete Ant's output
		delete "${projectDir}/" + it }
	doLast { exec { workingDir 'db4o-7.4' ; commandLine 'ant','clean' } }
}
