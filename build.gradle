apply plugin: 'java'
defaultTasks 'jar', 'test'
sourceSets.main.java.srcDirs = ['src/']
sourceSets.test.java.srcDirs = ['test/']
sourceCompatibility = targetCompatibility = 8
tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
javadoc.enabled = false

configurations { junit } // Needed when we manually specify the tests' classpath
dependencies {
	// Run fred's Gradle with "./gradlew jar copyRuntimeLibs" to produce this directory
	// TODO: mvn.freenetproject.org is not browseable so I don't know the proper URI for fred and
	// its dependencies and hence am including the dependencies as flat files.
	// Use Gradle's dependency management + gradle-witness once this has been resolved.
	compile fileTree(dir: '../fred/build/output/', include: '*.jar')
	compile files('db4o-7.4/db4o.jar')
	junit files('/usr/share/java/junit4.jar', '/usr/share/java/hamcrest-core.jar')
	testCompile configurations.junit
}

task compileDb4o(type: Exec) {
	// See https://bugs.freenetproject.org/view.php?id=7058
	outputs.upToDateWhen { file('db4o-7.4/db4o.jar').exists() }
	workingDir 'db4o-7.4'
	commandLine 'ant', "-Djavac.source.version=" + sourceCompatibility,
	                   "-Djavac.target.version=" + targetCompatibility
}

compileJava {
	dependsOn 'compileDb4o'
}

task prepareVersionFile(type: Copy) {
	outputs.upToDateWhen { false }
	from sourceSets.main.java.srcDirs ; into "${buildDir}/custom/versionFileJava/"
	include 'plugins/Freetalk/Version.java' ; filter {
		it.replaceAll("@custom@", "git describe --always --abbrev=4 --dirty".execute().text.trim())
	}
}

task compileVersionFile(type: JavaCompile, dependsOn: ['compileJava', 'prepareVersionFile']) {
	classpath = sourceSets.main.compileClasspath
	source = prepareVersionFile.destinationDir
	destinationDir = file("${buildDir}/custom/versionFileClass/")
}

tasks.create("testJar", Jar) // TODO: Performance: Use register() once my Gradle is more recent.
["jar", "testJar"].each { jarType ->
task("$jarType", type: Jar, overwrite: true, dependsOn: tasks.withType(AbstractCompile)) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
	duplicatesStrategy = "fail"
	baseName = (jarType == 'testJar') ? 'Freetalk-with-unit-tests' : 'Freetalk'
	destinationDir = new File(projectDir, (jarType == 'testJar') ? "build-test" : "dist")
	manifest { attributes("Plugin-Main-Class": "plugins.Freetalk.Freetalk") }
	
	// FIXME: Gradle versions starting with 5.0 will not work with the below code:
	// For some reason the above "task(... overwrite: true ...)" does NOT cause the input of the
	// "jar" task to be emptied with those versions. It will instead default to include the whole of
	// sourceSets.main.output.classesDirs which causes the below
	// from(sourceSets.main.output.classesDirs) to duplicate it.
	// That in turn will cause Gradle to complain about duplicate inputs for the task.
	// The branch which added this FIXME contains quite a lot of investigation into the issue.
	// From that I can say that IMHO the only clean, simple fix is to get rid of the whole mechanism
	// of recompiling Version.class to include the Git revision. This will allow us to remove the
	// below from() (except if the "jarType" is "testJar").
	// The Version.class mechanism should be replaced with putting the revision into a *.properties
	// file which class Version loads and parses. That file shall then be a "generated resource" in
	// terms of Gradle.
	// Generating "resources" dynamically during compilation is a thing which Gradle does support
	// officially - unlike patching of source files such as Version.java which we do currently.
	// E.g. see "Working with generated resources" at
	// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.SourceSetOutput.html
	// Once you've developed this don't forget to remove the hardcoding of the Gradle version to
	// 4.10.3 in file ".travis.yml", it is marked with a FIXME.
	from(sourceSets.main.output.classesDirs) { exclude 'plugins/Freetalk/Version.class' }
	from(compileVersionFile.destinationDir) { include 'plugins/Freetalk/Version.class' }
	from(sourceSets.main.java.srcDirs) { include 'plugins/Freetalk/l10n/*.l10n' }
	from(sourceSets.main.java.srcDirs) { include 'plugins/Freetalk/ui/web/css/*.css' }
	from zipTree('db4o-7.4/db4o.jar')
	if(jarType == 'testJar') from sourceSets.test.output.classesDirs
}}

test {
	dependsOn 'testJar'
	
	// Reset classpath to only use the JAR, not the class files, because some tests may need a JAR
	// to load into a Freenet node, and given the JAR is needed we shouldn't duplicate its classes.
	classpath = fileTree(dir: '../fred/build/output/', include: '*.jar')
	classpath+= files(testJar.archivePath)
	classpath+= configurations.junit
	
	scanForTestClasses = false
	include '**/*Test.class'
	exclude 'com/db4o/**'
	
	// TODO: Enable once my distribution ships a more recent Gradle which supports this.
	// failFast = true
	maxHeapSize = "512m"
	maxParallelForks = Runtime.runtime.availableProcessors()
	forkEvery = 1 // One VM per test, for safety and probably needed for maxParallelForks to work
	systemProperties += [
		"is_FT_unit_test": "true",
		"FT_test_jar": testJar.archivePath
	]
	workingDir = "${buildDir}/tmp/testsWorkingDir"
	doFirst { delete workingDir ; mkdir workingDir }
	testLogging { events "passed", "skipped", "failed" ; exceptionFormat "full" }
}

clean {
	[ 'build-test', 'test-coverage', 'dist' ].each { // Beyond defaults also delete Ant's output
		delete "${projectDir}/" + it }
	doLast { exec { workingDir 'db4o-7.4' ; commandLine 'ant','clean' } }
}
